import { useEffect, useState } from 'react';
import { NextPage } from 'next';
import { useRouter } from 'next/router';
import Link from 'next/link';
import { useForm } from 'react-hook-form';
import axios, { AxiosResponse, AxiosError } from 'axios';
​
type Article = {
  id: Number,
  title: string,
  content: string,
  created_at: string,
};
​
type ArticleInput = {
  title: string,
  content: string,
};
​
const articleValidation = { 
  title: {
    required: {
      value: true,
      message: 'Title field is required.'
    },
    max: {
      value: 255,
      message: 'Title field max character up to 255 only.'
    }
  },
  content: {
    required: {
      value: true,
      message: 'Content field is required.',
    },
    max: {
      value: 9000,
      message: 'Content field max characeter up to 9000 only'
    }
  }
};
​
const Articles: NextPage = () => {
  const router = useRouter();
  const articleId  = router.query.articleId as string;
  const [article, setArticle] = useState<Article>();
  const [isLoading, setIsLoading] = useState(true);
​
  const { register, handleSubmit, formState: { errors } } = useForm<ArticleInput>();
​
  useEffect(() => {
    const query = `
      query {
        article(id: ${articleId}) {
          id
          title
          content
          created_at
        }
      }
    `;
​
    axios.post(`http://localhost:4000/graphql`, { query })
    .then((res: AxiosResponse) => {
      setArticle(res.data.data.article);
      setIsLoading(false);
    })
    .catch((err: AxiosError) => console.error(err));
  })
​
  const onSubmit = (data: ArticleInput) => {
    const query = `
      mutation {
        updateArticle(articleInput: {
          title: "${data.title}",
          content: "${data.content}"
        }) {
          id
          title
          content
          created_at
        }
      }
    `;
​
    axios.post(`http://localhost:4000/graphql`, { query })
    .then((res: AxiosResponse) => alert('Create Success!'))
    .catch((err: AxiosError) => console.error(err));
  }
​
  return (
    <div>
      <Link href="/">Back</Link>
      <div>
          <div>Update Article</div>
          { !isLoading &&
            <form onSubmit={handleSubmit(onSubmit)} style={{ display: 'flex', flexDirection: 'column' }}>
              <label htmlFor="title">Title</label>
              <input id="title" {...register('title', articleValidation.title)} defaultValue={article?.title}/>
              <div>{errors.title?.message}</div>
              <label htmlFor="content">Content</label>
              <textarea id="content" {...register('content', articleValidation.content)} defaultValue={article?.content}/>
              <div>{errors.content?.message}</div>
              <button>Save</button>
            </form>
          }
      </div>
    </div>
  );
}
​
export default Articles